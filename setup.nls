;----------------------------------------------------------------------------;
;                                                                            ;
;    NetworkConsensus - SETUP MODULE                                         ;
;                                                                            ;
;    Authors:                                                                ;
;        Leonardo Mizoguti                                                   ;
;        Man Hue Tran Diep                                                   ;
;        Thierry Fosso Kenne                                                 ;
;                                                                            ;
;    Coordinator:                                                            ;
;        Ada Diaconescu                                                      ;
;                                                                            ;
;----------------------------------------------------------------------------;

;----------------------------------------------------------------------------;
;  This module is responsible for retrieving the topologies' parameters      ;
;  and call the procedures from the TOPOLOGY MODULE to setup correctly       ;
;  the whole network.                                                        ;
;----------------------------------------------------------------------------;

;----------------------------------------------------------------------------;
;    Topologies setup                                                        ;
;----------------------------------------------------------------------------;

; Responds to the "Edit group" button and creates/modifies a given group 
; identified by group-id according to the topology parameters.
; Adjust the network according to the network-type? field if no adjacency-matrix
; is provided.

to Setup.editGroup [adjacency-matrix allow-overwrite]
  
  ; if number-of-groups is not defined, resize network
  if number-of-groups = 0 [ setup-region ]
  
  ; detect if network size has changed
  if total-groups != number-of-groups [ report-error 7 stop ]
  
  ; warns user about topology overwriting
  if not allow-overwrite and count turtles with [my-group = group-id] > 0 [
    if not user-yes-or-no? "ATTENTION: This action will overwrite the existing group with the given id. Would you like to proceed?" [ stop ]
  ]
  
  ; set results precision 
  set p 2
  
  ; setup network extension
  nw:set-context turtles influence-links
  
  ; verifies group-id
  if (group-id <= 0) or (group-id > total-groups) [ report-error 6 stop ]
  
  ; adjust agents by creating turtles or killing them if necessary 
  Setup.adjustAgents adjacency-matrix
  
  ifelse (network-type? != "Scale-free Network") or (adjacency-matrix != nobody) [    
    ; adjust network by creating the right links
    Setup.adjustNetwork adjacency-matrix
  ]
  [
    ifelse (num-edges >= number-of-agents or num-edges = 0)
        [report-error 3]
        [setup-scale-free-network]
  ]
  
  ; adjust agents identifier
  Setup.adjustAgentsIdentifiers
  
  ; adjust the agent values according to their type
  Setup.adjustAgentTypeProperties
  
  ; update labels
  update-labels
      
  ; block simulations making re-validation necessary
  clear-ticks
  set running-simulation false
  
end

; Move nodes to different groups, set their position and create all
; necessary links according to the network-type or to the adjacency matrix
; if it is provided.

to Setup.adjustNetwork [adjacency-matrix]
  
  ; Select nodes belonging to the given group
  let group-nodes turtles with [my-group = group-id]
  
  ; Checks if the group is not empty
  if count group-nodes > 0 [
    
    ; Clear all existing links and reset nodes' type
    ask group-nodes [
      ask my-in-influence-links [die]
      ask my-out-influence-links [die] 
    ]
    
    ; Position nodes in a cirle
    layout-circle (but-first sort group-nodes) 5
    
    ; Set group's central agent
    let centralAgent setup-central-agent-from-list group-nodes
    
    ; Create links from adjacency matrix if it is provided,
    ; or according to the network-type if not.
    ifelse adjacency-matrix != nobody [
      setup-custom-matrix-network group-nodes adjacency-matrix
    ]
    [
      ; setup network
      ifelse network-type? = "Radial Network" [
        setup-radial-network group-nodes
      ][
      ifelse network-type? = "Full Network" [
        setup-full-network group-nodes
      ][
      ifelse network-type? = "Ring Network" [
        setup-ring-network group-nodes
      ][
      ifelse network-type? = "Custom Wheel" [
        ifelse (total-spokes >= number-of-agents)
        [report-error 4]
        [setup-custom-wheel-network group-nodes]
      ][
      if network-type? = "Random Network" [
        setup-random-network group-nodes
      ]
      ]]]]
    ]
    
    ; Moves the group
    move-to-agent group-nodes centralAgent
    
  ]
  
end

;----------------------------------------------------------------------------;
;    Agents setup                                                            ;
;----------------------------------------------------------------------------;

; Sets the default shape of turtles and creates new or kills unnecessary
; turtles depending on the group-id and the given number of agents.

to Setup.adjustAgents [adjacency-matrix]
  
  ; set the default shape as "circle"
  set-default-shape turtles "circle" 
  
  ifelse network-type? = "Scale-free Network" and adjacency-matrix = nobody [
    ask turtles with [ my-group = group-id ] [ die ]
  ]
  [
    ; get number of turtles with the given group-id
    let number-of-turtles-in-group count turtles with [my-group = group-id]
    if adjacency-matrix != nobody [set number-of-agents length adjacency-matrix]
    
    ; create/kill turtles if the number of turtles with the given group-id is different
    ; from the given number of agents
    ifelse (number-of-turtles-in-group < number-of-agents) [
      create-turtles (number-of-agents - number-of-turtles-in-group) [ set my-group group-id ]
    ]
    [
      ask max-n-of (number-of-turtles-in-group - number-of-agents) turtles with [ my-group = group-id ] [ who ] [ die ]
    ]
    
    if adjacency-matrix = nobody [ask first sort turtles with [my-group = group-id] [set agent-type 1]]
  ]
  
end

; Sets nodes properties depending on their type.

to Setup.adjustAgentTypeProperties
  ask turtles with [ agent-type = 0 ] [ set color blue set self-val other's-value set size 1.5 ]
  ask turtles with [ agent-type = 1 ] [ set color red set self-val head's-value set size 1.5 ]
end

to Setup.adjustAgentsIdentifiers
  let id 0
  let id-group 1
  repeat total-groups [
    let node-list sort turtles with [my-group = id-group]
    foreach node-list [
      ask ? [ set identifier id set label id ]
      set id id + 1  
    ]
    set id-group id-group + 1  
  ]
end

to convert-into-head [nodes]
  ifelse is-list? nodes [
    foreach nodes [
      ask turtle-with-id ? [ set agent-type 1 ]
    ]
  ]
  [
    if is-number? nodes [
       ask turtle-with-id nodes [ set agent-type 1 ]
    ] 
  ]
  Setup.adjustAgentTypeProperties
end

to convert-into-others [nodes]
  ifelse is-list? nodes [
    foreach nodes [
      ask turtle-with-id ? [ set agent-type 0 ]
    ]
  ]
  [
    if is-number? nodes [
       ask turtle-with-id nodes [ set agent-type 0 ]
    ] 
  ]
  Setup.adjustAgentTypeProperties
end

to delete-node [node-identifier]
  ask turtle-with-id node-identifier [die]
  Setup.adjustAgentsIdentifiers
end

;----------------------------------------------------------------------------;
;    Links setup                                                             ;
;----------------------------------------------------------------------------;

; Add a single edge from a node to another

to add-edge [t_from t_to]
  carefully [
    ask turtle-with-id t_from [ 
      create-influence-link-to turtle-with-id t_to [
        if ([my-group] of turtle-with-id t_from != [my-group] of turtle-with-id t_to) [ set inter-group true ] 
      ]
    ]
    ask turtle-with-id t_to [ 
      create-influence-link-to turtle-with-id t_from [
        if ([my-group] of turtle-with-id t_from != [my-group] of turtle-with-id t_to) [ set inter-group true ] 
      ]
    ]
  ]
  [ 
    report-error 9 
  ]
end 

; Add multiples edges from list of nodes to another list of nodes

to add-edges [T_from T_to]
  (foreach T_from T_to [ add-edge ?1 ?2 ])
end

; Add edges from one to multiple

to add-edges-from [t_from T_to]
  foreach T_to [add-edge t_from ?]
end 

; Delete a single edge

to delete-edge [t_from t_to]
  carefully [
    ask turtle-with-id t_from [ ask out-influence-link-to turtle-with-id t_to [die]]
    ask turtle-with-id t_to [ ask out-influence-link-to turtle-with-id t_from [die]]
  ]
  [
    report-error 9
  ]
end 

; Delete multiples edges from list of nodes to another list of nodes

to delete-edges [T_from T_to]
  (foreach T_from T_to [ delete-edge ?1 ?2 ])
end

; Delete edges from one to multiple

to delete-edges-from [t_from T_to]
  foreach T_to [delete-edge t_from ?]
end

;----------------------------------------------------------------------------;
;    Regions setup                                                           ;
;----------------------------------------------------------------------------;

; Setup patches to distribute different groups

to setup-region
  
  let new-network-size (ceiling sqrt total-groups) ^ 2
  
  if total-groups != number-of-groups [
      
    set number-of-groups total-groups
    
    if (new-network-size != network-size or total-groups < number-of-groups) [
      
      if (total-groups <= 0) [ report-error 5 stop ]
      
      set network-size new-network-size
      
      let temp-adjacency adjacency-matrices
      let temp-inter-group-links inter-group-links
      let temp-head-agents head-agents
      
      set group-id 1
      
      let world-size (ceiling sqrt total-groups) * 7
      let window-length world-width * patch-size
      
      resize-world (0 - world-size) world-size (0 - world-size) world-size
      set-patch-size window-length / world-width
      
      while [(group-id <= network-size) and (group-id <= length temp-adjacency)] [
        let adjacency-matrix item (group-id - 1) temp-adjacency
        if adjacency-matrix != nobody [ Setup.editGroup adjacency-matrix true ] 
        set group-id group-id + 1
      ]
      
      if any? turtles [
        let max-identifier [identifier] of max-one-of turtles [identifier]
        
        foreach temp-inter-group-links [
          if (item 0 ?) <= max-identifier and (item 1 ?) <= max-identifier [
            add-edge item 0 ? item 1 ?
          ]
        ]
        
        foreach temp-head-agents [
          if ? <= max-identifier [
            ask turtle-with-id ? [set agent-type 1]
          ]
        ]
        
        Setup.adjustAgentTypeProperties
      ]
      
      set group-id 1
      
    ]
    
  ]
  
  
  
end



