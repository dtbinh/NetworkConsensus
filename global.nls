;----------------------------------------------------------------------------;
;                                                                            ;
;    NetworkConsensus - GLOBAL DEFINITIONS                                   ;
;                                                                            ;
;    Authors:                                                                ;
;        Leonardo Mizoguti                                                   ;
;        Man Hue Tran Diep                                                   ;
;        Thierry Fosso Kenne                                                 ;
;                                                                            ;
;    Coordinator:                                                            ;
;        Ada Diaconescu                                                      ;
;                                                                            ;
;----------------------------------------------------------------------------;

;----------------------------------------------------------------------------;
;  This module is keeps all the global definitions, which includes breeds,   ;
;  turtles, links and patches internal variables and global variables.       ;
;  It can also include auxiliary reporters / procedures.                     ;
;----------------------------------------------------------------------------;

;----------------------------------------------------------------------------;
;    Turtles                                                                 ;
;----------------------------------------------------------------------------;

; Nodes' internal variables
turtles-own [
  
  ; value representing an agents opinion
  self-val
  
  ; sum of in values
  in-vals
  
  ; sum of out values
  out-val
  
  ; social capital
  self-weight 
  
  ; a number representing the group this turtle is a member of, or -1 if this turtle is not in a group.
  my-group
  group
  group-size
  
  ; a number indicating the type of the node
  agent-type
  
  ; auxiliary identifier
  identifier 
  
]

to-report internal-group-id
    let turtle-group my-group
    report position self sort turtles with [ my-group = turtle-group ]
end

to-report turtle-with-group-and-internal-id [turtle-group-id internal-id]
    report item internal-id sort turtles with [my-group = turtle-group-id ]
end

to-report get-in-neighbour-weights
  let in-weight-sum 0
  ask my-in-influence-links [
    set in-weight-sum (in-weight-sum + weight)  
  ]
  report in-weight-sum 
end

to-report turtle-with-id [id]
  report one-of turtles with [identifier = id]
end

;----------------------------------------------------------------------------;
;    Links                                                                   ;
;----------------------------------------------------------------------------;

; Influence links breed
directed-link-breed [influence-links influence-link]

;; only use self-val in-vals self-weight
;; where is my-out-influence-links (builtin macro!) --> directed-link-bread
links-own [ 
  
  ; the strength of the influence of the from (out) agent on the to (in) agent -- future: can be calculated as a difference between the strengths of the respective agents
  weight
  
  ; a boolean that indicates if the link connects to different groups
  inter-group

]  

;----------------------------------------------------------------------------;
;    Global variables                                                        ;
;----------------------------------------------------------------------------;

globals [
  p
  new-node  ;; the last node we created
  degrees   ;; this is an array that contains each node in
            ;; proportion to its degree
  
  ; simulation variables for variations (eps = epsilon, agt = number of agents)
  eps
  agt
  
  ; Boolean to check if header of out file is already printed
  printed-head
  
  ; number-of-groups
  number-of-groups
  
  ; Network size (max number of groups)
  network-size
  
  ; Simulation ready to start
  simulation-ready
  
  ; Cumulated ticks (for plotting)
  cumulated-ticks
  
] 

;----------------------------------------------------------------------------;
;    Auxiliary general procedures                                            ;
;----------------------------------------------------------------------------;

to-report center-patch-of-group [id-group]
  let slotsPerRow ceiling sqrt total-groups 
  let slotSize world-width / slotsPerRow
  let slotRow (floor (id-group / slotsPerRow))
  if id-group mod slotsPerRow = 0 [ set slotRow slotRow - 1 ]
  let slotColumn (id-group mod slotsPerRow) - 1
  if slotColumn = -1 [ set slotColumn slotsPerRow - 1 ]
  let patchX (min-pxcor) + slotColumn * slotSize + slotSize / 2 - 1
  let patchY (max-pycor) - slotRow * slotSize - slotSize / 2 + 1
  report patch patchX patchY
end

to-report adjacency-matrices
  
  let adjacency-matrices-list []
  
  ; group-id iteration
  let id-group 1
  
  repeat number-of-groups [
      
      ; retrieve group
      let turtle-group sort turtles with [my-group = id-group]
      
      let adjacency-matrix nobody
      
      if not empty? turtle-group [
        
        set adjacency-matrix []
        
        ; write adjacency matrix
        let row 0
        while [row < length turtle-group] [
          let matrix-row []
          let column 0
          while [column < length turtle-group] [
            ifelse (row != column)
            [
              let node-link [in-influence-link-from item column turtle-group] of item row turtle-group
              set matrix-row lput (ifelse-value (node-link = nobody) [ 0 ] [ 1 ]) matrix-row
            ] 
            [
              set matrix-row lput 0 matrix-row
            ]
            set column column + 1
          ]
          set row row + 1
          set adjacency-matrix lput matrix-row adjacency-matrix
        ]
      ]
      
      set adjacency-matrices-list lput adjacency-matrix adjacency-matrices-list
      set id-group id-group + 1
    ]
  
    report adjacency-matrices-list
  
end

to-report inter-group-links
  
  let inter-group-links-list []
  ask influence-links with [ inter-group = true ] [
    let inter-group-link []
    set inter-group-link lput ([identifier] of end1) inter-group-link
    set inter-group-link lput ([identifier] of end2) inter-group-link
    set inter-group-links-list lput inter-group-link inter-group-links-list 
  ]
  report inter-group-links-list
  
end

to-report head-agents
  report map [[identifier] of ?] sort turtles with [agent-type = 1]
end


