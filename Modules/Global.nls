;----------------------------------------------------------------------------;
;                                                                            ;
;    NetworkConsensus - GLOBAL DEFINITIONS                                   ;
;                                                                            ;
;    Authors:                                                                ;
;        Leonardo Mizoguti                                                   ;
;        Man Hue Tran Diep                                                   ;
;        Thierry Fosso Kenne                                                 ;
;                                                                            ;
;    Coordinator:                                                            ;
;        Ada Diaconescu                                                      ;
;                                                                            ;
;----------------------------------------------------------------------------;

;----------------------------------------------------------------------------;
;  This module is keeps all the global definitions, which includes breeds,   ;
;  turtles, links and patches internal variables and global variables.       ;
;  It can also include auxiliary reporters / procedures.                     ;
;----------------------------------------------------------------------------;

;----------------------------------------------------------------------------;
;    Turtles                                                                 ;
;----------------------------------------------------------------------------;

; Nodes' internal variables
turtles-own [
  
  ; value representing an agents opinion
  self-val
  
  ; sum of in values
  in-vals
  
  ; sum of out values
  out-val
  
  ; social capital
  self-weight 
  
  ; a number representing the group this turtle is a member of, or -1 if this turtle is not in a group.
  my-group
  
  ; a number indicating the type of the node
  agent-type
  
  ; initial value of the node (others value or head value by default according to agent-type
  agent-initial-value
  
  ; variable that indicates if the node has a custom initial value
  agent-has-custom-initial-value
  
  ; auxiliary identifier (this value is used instead of "who" for convenience purposes)
  identifier 
  
]

to-report Global.getInNeighborsWeight
  let in-weight-sum 0
  ask my-in-influence-links [
    set in-weight-sum (in-weight-sum + weight)  
  ]
  report in-weight-sum 
end

to-report Global.turtleWithId [id]
  report one-of turtles with [identifier = id]
end

;----------------------------------------------------------------------------;
;    Links                                                                   ;
;----------------------------------------------------------------------------;

; Influence links breed
directed-link-breed [influence-links influence-link]

;; only use self-val in-vals self-weight
;; where is my-out-influence-links (builtin macro!) --> directed-link-bread
links-own [ 
  
  ; the strength of the influence of the from (out) agent on the to (in) agent
  weight
  
  ; a boolean that indicates if the link connects to different groups
  inter-group

]  

;----------------------------------------------------------------------------;
;    Global variables                                                        ;
;----------------------------------------------------------------------------;

globals [
  
  ; results precision (number of decimal places)
  results-precision
  
  ; the last node we created (Scale-free)
  new-node 
  
  ; this is an array that contains each node in proportion to its degree 
  degrees   
  
  ; simulation variables for variations (eps = epsilon, agt = number of agents)
  eps
  agt
  
  ; boolean to check if header of out file is already printed
  printed-head
  
  ; number-of-groups
  number-of-groups
  
  ; network size (max number of groups)
  network-size
   
  ; cumulative ticks count
  number-of-ticks
  
  ; boolean indicating if a simulation is running or not
  running-simulation
    
] 

;----------------------------------------------------------------------------;
;    Auxiliary general procedures                                            ;
;----------------------------------------------------------------------------;

to-report Global.adjacencyMatrices
  
  let adjacency-matrices-list []
  
  ; group-id iteration
  let id-group 1
  
  repeat number-of-groups [
      
      ; retrieve group
      let turtle-group sort turtles with [my-group = id-group]
      
      let adjacency-matrix nobody
      
      if not empty? turtle-group [
        
        set adjacency-matrix []
        
        ; write adjacency matrix
        let row 0
        while [row < length turtle-group] [
          let matrix-row []
          let column 0
          while [column < length turtle-group] [
            ifelse (row != column)
            [
              let node-link [in-influence-link-from item column turtle-group] of item row turtle-group
              set matrix-row lput (ifelse-value (node-link = nobody) [ 0 ] [ 1 ]) matrix-row
            ] 
            [
              set matrix-row lput 0 matrix-row
            ]
            set column column + 1
          ]
          set row row + 1
          set adjacency-matrix lput matrix-row adjacency-matrix
        ]
      ]
      
      set adjacency-matrices-list lput adjacency-matrix adjacency-matrices-list
      set id-group id-group + 1
    ]
  
    report adjacency-matrices-list
  
end

to-report Global.interGroupLinks
  
  let inter-group-links-list []
  ask influence-links with [ inter-group = true ] [
    let inter-group-link []
    set inter-group-link lput ([identifier] of end1) inter-group-link
    set inter-group-link lput ([identifier] of end2) inter-group-link
    set inter-group-links-list lput inter-group-link inter-group-links-list 
  ]
  report inter-group-links-list
  
end

to-report Global.headNodes
  report map [[identifier] of ?] sort turtles with [agent-type = 1]
end

to-report Global.customInitialNodeValues
  
  let custom-initial-values-list []
  ask turtles with [agent-has-custom-initial-value] [
    let custom-initial-value []
    set custom-initial-value lput identifier custom-initial-value
    set custom-initial-value lput agent-initial-value custom-initial-value
    set custom-initial-values-list lput custom-initial-value custom-initial-values-list
  ]
  report custom-initial-values-list
  
end
