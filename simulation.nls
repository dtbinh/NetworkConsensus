;----------------------------------------------------------------------------;
;                                                                            ;
;    NetworkConsensus - SIMULATION MODULE                                    ;
;                                                                            ;
;    Authors:                                                                ;
;        Leonardo Mizoguti                                                   ;
;        Man Hue Tran Diep                                                   ;
;        Thierry Fosso Kenne                                                 ;
;                                                                            ;
;    Coordinator:                                                            ;
;        Ada Diaconescu                                                      ;
;                                                                            ;
;----------------------------------------------------------------------------;

to-report simulate-varying-agents
  
  let simulation-result ifelse-value (is-vary-eps?) [simulate-varying-epsilon][simulate]
  
  if simulation-result [
      edit-group nobody
      if (is-vary-eps?) [ set eps min-eps ]
      reset-ticks
      set agt (agt + step-agents)
      if agt > max-agents [ report true ]
      set number-of-agents agt
  ]
  report false

end

to-report simulate-varying-epsilon
  
  if simulate [
    setup-weight-net
    reset-ticks
    adjust-agent-values
    set eps precision (eps + step-eps) ((-1) * floor(log step-eps 10))
    if eps > max-eps [ report true ]
    set epsilon eps
  ]
  report false
  
end

to-report simulate
  
  let convergence (([self-val] of turtle 0) - ([self-val] of turtle 1))
 
  ;eval convergence and decide whether or not to go on
  ifelse convergence >= convergence-precision 
  [
    ;type "at ticks: " type ticks print ": " ask turtle 0 [type "self-val of a0: " show self-val] ask turtle 1 [type "self-val of a1: " show self-val]
    
    ask turtles [ 
      update-in-vals  
    ]
    ask turtles[
      update-self-val
    ]
    display-labels
   
    tick
    
    report false
    
  ]
  [
    print-results 
    ;type "end of test for epsilon: " print epsilon
    report true 
  ]
 
end

to validate-simulation
  
  ; validate network to avoid inconsistencies   
  validate-network
    
  ; validate simulation options to avoid inconsistencies
  validate-simulation-options
  
  reset-ticks
  
end

to go
  
  ifelse (is-vary-agents?) [
    if simulate-varying-agents [ stop ]
  ]
  [
    ifelse (is-vary-eps?) [ 
      if simulate-varying-epsilon [ stop ]
    ] 
    [ 
      if simulate [ stop ]
    ]
  ]
 
end

to update-in-vals 
  ;set in-vals sum [self-val] of in-influence-link-neighbors ; my-in-influence-links 
  set in-vals 0
  let neighbor-impact 0 
  let neighbour-weight 0
  let neighbour-self-val 0
  foreach sort in-influence-link-neighbors [ 
    set neighbour-weight [weight] of (in-influence-link-from ?)
    set neighbour-self-val [self-val] of ? 
    set neighbor-impact (neighbour-self-val * neighbour-weight)
    set in-vals (in-vals + neighbor-impact) 
  ]
  ;type "agent " type [who] of self type " has in-vals: " type [in-vals] of self print ""
end

to update-self-val
  let old-self-val self-val
  set self-val (in-vals + (old-self-val * self-weight)) 
  ;type "agent " type [who] of self type " has self-val: " type [self-val] of self print ""
end

to validate-simulation-options
  set eps min-eps
  set epsilon eps
  set agt min-agents
  set number-of-agents agt
end

