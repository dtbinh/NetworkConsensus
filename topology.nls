to setup-random-network
  ;setup layout
  layout-circle (sort turtles) max-pxcor - 1
     
   ;; Create a random network with a probability p of creating edges
   ask turtles [
      ;; we use "self > myself" here so that each pair of turtles
      ;; is only considered once and to avoid link to itself
      create-influence-links-to turtles with [self > myself and
        random-float 1.0 < random-probability]
      create-influence-links-from turtles with [self > myself and
        random-float 1.0 < random-probability]
   ]
   
   ;;set weight values
   setup-weight-net
end
  
to setup-radial-network
  ; create links in both directions between turtle 0 and all other turtles
  ask turtle 0 [ create-influence-links-to other turtles ]
  ask turtle 0 [ create-influence-links-from other turtles ]
  ;type "created " type count influence-links print " influence-links"
  ; do a radial tree layout, centered on turtle 0
  layout-radial turtles influence-links (turtle 0)
  
  ; set weight values
  setup-weight-net
end

to setup-full-network
  ; create links in both directions between all pairs of turtles
  foreach sort turtles[
    ask ? [ create-influence-links-to other turtles ]
  ]
  
  ;set weights
  setup-weight-net
  
  ;;set layout
  layout-circle turtles with [who > 0 ] 8 ;layout-circle agentset radius ;; layout-circle list-of-turtles radius
  ask turtle 0[ set xcor 0 set ycor 0]
end

to setup-ring-network
  
  if (number-of-neighbors > total-agents - 2) or (number-of-neighbors mod 2 != 0) or (number-of-neighbors <= 0)  [ print "ERROR" ]
  
  ; create links in both directions between all neighbours of turtles => ring; except turtle 0 (the control agent)
  setup-ring-no-spokes

  ask turtle 0 [
    create-influence-links-to other turtles
    create-influence-links-from other turtles
  ]
  
  ;set layout
  layout-circle sort turtles with [who > 0 ] 8 ;layout-circle agentset radius ;; layout-circle list-of-turtles radius
  ask turtle 0[ set xcor 0 set ycor 0]
  
  ;set weights
  setup-weight-net  
end

to setup-ring-network-less-spokes
  ; create links in both directions between all neighbours of turtles => ring; except turtle 0 (the control agent)
  setup-ring-no-spokes
  
  ; set links
  let nmbr-spokes total-spokes
  let other-who 1
  let delta round(total-agents / nmbr-spokes)
  if(delta = 0)[set delta 1]
  let counter 1 
  while [other-who < total-agents and counter <= total-spokes][
    ask turtle 0[
      create-influence-link-to turtle other-who
      create-influence-link-from turtle other-who
      set other-who (other-who + delta)
      set counter (counter + 1)
    ]
  ]

 ; set links   
 set counter count([my-out-influence-links] of turtle 0)
  while [counter < total-spokes][
    let agent-who random (total-agents)
    type "agent-who " print agent-who
    if (agent-who != 0)[
      ask turtle 0[
        create-influence-link-to turtle agent-who
        create-influence-link-from turtle agent-who
      ]
      set counter count([my-out-influence-links] of turtle 0)
    ]
  ]
  
  ;set layout
  layout-circle sort turtles with [who > 0 ] 8 ;layout-circle agentset radius ;; layout-circle list-of-turtles radius
  ask turtle 0[ set xcor 0 set ycor 0]
  
  ;set weights
  setup-weight-net
  
end

to check-weights
  ask turtles[
    let in-weight-sum get-in-neighbour-weights
    set in-weight-sum (in-weight-sum + self-weight)
    ;type "check-weights: agent " type [who] of self type ": " type in-weight-sum print ""  
    if in-weight-sum != 1[
      type "Warning --> check-weights: agent " type [who] of self type ": " type in-weight-sum type ". should be 1." print "" 
    ]
    
    ;type "sum-in-weights: agent " type [who] of self type ": " type get-in-neighbour-weights print ""
    ;type "self-weight: agent " type [who] of self type ": " type self-weight print "" 
  ]
end

to setup-ring-no-spokes
  
   ; create links in both directions between all neighbours of turtles => ring; except turtle 0 (the control agent)
  foreach sort turtles[
    let agent-who ([who] of ?)
    let left-agent-who (agent-who - 1)
    let right-agent-who (agent-who + 1)
    ask ?[  
      if(agent-who != 0)[
        if (left-agent-who = 0)[set left-agent-who (total-agents - 1)]
        if(right-agent-who = total-agents)[set right-agent-who 1]
        create-influence-link-to turtle right-agent-who 
        create-influence-link-to turtle left-agent-who
      ]
    ]
  ]
  
end

to-report get-in-neighbour-weights
  let in-weight-sum 0
  foreach sort my-in-influence-links[
       set in-weight-sum (in-weight-sum + [weight] of ?)  
  ]
  report in-weight-sum 
end

; turtle 0: 0.9 self; 0.1 influence from all others
; others: 0.9 from turtle0; 0.1/neighbours from neighbours; ~0.1 self 
to setup-absolute-weight-for-full-net
  let neigh-influence (epsilon / (total-agents - 1))
  ask turtles [ foreach sort my-out-influence-links [ ask ? [set weight neigh-influence] ]]
  ;ask turtles [show get-in-neighbour-weights]

  ;turtle 0 --> out
  ask turtle 0 [ foreach sort my-out-influence-links [ ask ? [set weight (1 - epsilon)] ] ]
  ;turtle 0 --> in
  ask turtle 0 [ foreach sort my-in-influence-links [ ask ? [set weight precision (epsilon / (total-agents - 1)) 100] ] ]
  ask turtle 0 [ set self-weight (1 - epsilon)]

  ask turtles  [ set self-weight (1 - get-in-neighbour-weights) ]
  
  ;print weights
  print-weights
  
   
end

to setup-custom-agents [nbOfAgents]
  ;; set shapes
  set-default-shape turtles "circle"
  ;; create agents
  create-turtles nbOfAgents [ set color blue ]
  ;; all turtles are initially ungrouped
  ask turtles [ set my-group -1 ]
end

to setup-central-agent [ setOfAgents centralAgent ]
  ask centralAgent [ set color red ]
  ; init self values
  init-custom-agent-values setOfAgents centralAgent
end

to init-custom-agent-values [setOfAgents centralAgent]
  ; init self values
  ask setOfAgents with [ who != centralAgent ] [ set self-val other's-value  ]
  ask one-of setOfAgents with [ who != centralAgent ] [type "--> set self-val of turtle 1..N to: " type [self-val] of turtle who print ""]
  ask centralAgent [ set self-val head's-value ]
  type "--> set self-val of turtle " type [who] of centralAgent type " : " type [self-val] of centralAgent print ""
end

to-report get-home ;; turtle procedure
  ;; calculate the minimum length of each side of our grid
  let side ceiling (sqrt (max [my-group] of turtles + 1))

  report patch
           ;; compute the x coordinate
           (round ((world-width / side) * (my-group mod side)
             + min-pxcor + int (world-width / (side * 2))))
           ;; compute the y coordinate
           (round ((world-height / side) * int (my-group / side)
             + min-pycor + int (world-height / (side * 2))))
end

to setup-multiple-networks
  let counter 0
;  if Radial-Network? [set counter counter + 1 ]
;  if Random-Network? [set counter counter + 1 ]
;  if Full-Network? [set counter counter + 1 ]
;  if Ring-Less-Spokes? [set counter counter + 1 ]
  
  ; set total number of agents to create
  let nbOfAgents 10 ;total-agents
  set total-agents nbOfAgents * counter
  if total-agents = 0 [
    user-message "Total-agents must be bigger than 0"
    stop
  ]
  type "total-agents: " print total-agents
  
  clear-all
  
  ;; setup agents
  setup-custom-agents total-agents
  
  let unassigned turtles
  ;; start with group 0 and loop to build each group
  let current 0
  while [any? unassigned and current < counter]
  [
    ;; place a randomly chosen set of group-size turtles into the current
    ;; group. or, if there are less than group-size turtles left, place the
    ;; rest of the turtles in the current group.
    ask n-of (min (list nbOfAgents (count unassigned))) unassigned
      [ set my-group current ]
    ;ask n-of (min (list nbOfAgents (count unassigned))) patches [ sprout 1 ]
    ;; consider the next group.
    set current current + 1
    ;; remove grouped turtles from the pool of turtles to assign
    set unassigned unassigned with [my-group = -1]
  ]
  
  ;ask turtles [type "Turtle " type who type ": " print my-group print ""]
  ;; if i'm in a group, move towards "home" for my group
  ask turtles [
    if my-group != -1
      [ face get-home ]
  ]
  
;  if Radial-Network? [
;    ;set radialSet n-of nbOfAgents turtles
;    set current current - 1
;    let radialGroup current
;    type "Radial group: " print radialGroup
;    let radialSet turtles with [my-group = radialGroup]
;    ;print radialSet
;    setup-custom-radial-network radialSet
;  ]
;  if Random-Network? [
;    ;set randomSet n-of nbOfAgents turtles
;    set current current - 1
;    let randomGroup current
;    type "Random group: " print randomGroup
;    let randomSet turtles with [my-group = randomGroup]
;    ;print randomSet
;    setup-custom-random-network randomSet
;  ]
  ;if Full-Network? [set fullSet n-of nbOfAgents turtles ]
  ;if Ring-Less-Spokes? [set ring-spokesSet n-of nbOfAgents turtles ]
  
  
  set p 2
  
  display-labels
  reset-ticks
end

to setup-custom-random-network [setOfAgents]
  ;; setup layout
  layout-circle (sort setOfAgents) 8
  
  ;; choose a random node and set it as central node
  let agent-who one-of setOfAgents
  setup-central-agent setOfAgents agent-who
  ;layout-circle setOfAgents 8 ;layout-circle agentset radius ;; layout-circle list-of-turtles radius
  ;ask agent-who[ set xcor 20 set ycor 20]
   
  ;; Create a random network with a probability p of creating edges
  ask setOfAgents [
      ;; we use "self > myself" here so that each pair of turtles
      ;; is only considered once and to avoid link to itself
      create-influence-links-to setOfAgents with [self > myself and
        random-float 1.0 < random-probability]
      create-influence-links-from setOfAgents with [self > myself and
        random-float 1.0 < random-probability]
   ]
end

to setup-custom-radial-network [setOfAgents]
  ;; choose a random node and set it as central node
  let agent-who one-of setOfAgents
  setup-central-agent setOfAgents agent-who
  ;; create links in both directions between turtle 0 and all other turtles
  ask agent-who [ create-influence-links-to other setOfAgents ]
  ask agent-who [ create-influence-links-from other setOfAgents ]
  ;type "created " type count influence-links print " influence-links"
  ;; do a radial tree layout, centered on turtle 0
  layout-radial turtles influence-links (agent-who)
  ;ask agent-who[ set xcor 2 set ycor 2]
end


to setup-weight-net
  let head-weight (1 - epsilon)
  let own-weight (1 * epsilon)
  let neighbour-weight (1 * epsilon)
  let norm 0
  let number-of-neighbours 0
  ask turtles[
    set number-of-neighbours count(my-in-influence-links) 
    ifelse (in-influence-link-neighbor? turtle 0)
       [
         set norm (head-weight + own-weight + (neighbour-weight * (number-of-neighbours - 1 )))
         foreach sort my-in-influence-links [ ask ? [set weight precision (neighbour-weight / norm) 100 ] ]
         ask  turtle who [ ask in-influence-link-from turtle 0 [set weight precision (head-weight / norm) 100 ] ]                
       ]
       [
         set norm (own-weight + (neighbour-weight * number-of-neighbours))
         foreach sort my-in-influence-links [ ask ? [set weight precision (neighbour-weight / norm) 100] ]
       ]
       
  ]
  ask turtle 0 [ 
    set number-of-neighbours count(my-in-influence-links)
    foreach sort my-in-influence-links [ ask ? [set weight precision (epsilon / number-of-neighbours ) 100] ] 
  ]
  
  ask turtles [ 
    set self-weight (1 - get-in-neighbour-weights)
    show self-weight
    ]
end

;prints weights of turtle 0 and turtle 1 (from neighbour 2)
to print-weights
  
  ask turtle 1 [
    let neigh-weight [weight] of in-influence-link-from turtle 2
    ;type "all in weights: " show get-in-neighbour-weights
    type "agent 1: weight from agent 0: " show  [weight] of in-influence-link-from turtle 0
    ;type "agent 1: total weight from in neighbours: " show ((count neighbors) * neigh-weight)
    type "agent 1: total weight from in neighbours: " show (get-in-neighbour-weights - ([weight] of in-influence-link-from turtle 0))
    type "agent 1: self weight: " show self-weight
  ]
  ask turtle 0 [
    type "agent 0: all in neighs weights: " show get-in-neighbour-weights
    type "agent 0: self-weight: " show self-weight
  ]
end